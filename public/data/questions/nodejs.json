[
    {
      "id": 1,
      "question": "What is Node.js?",
      "answer": "Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine."
    },
    {
      "id": 2,
      "question": "What does npm stand for?",
      "answer": "npm stands for Node Package Manager."
    },
    {
      "id": 3,
      "question": "How do you install a package using npm?",
      "answer": "You use the command `npm install package-name`."
    },
    {
      "id": 4,
      "question": "What is a package.json file?",
      "answer": "It is a file that contains metadata about a Node.js project and its dependencies."
    },
    {
      "id": 5,
      "question": "How do you create a new Node.js project?",
      "answer": "You use the command `npm init` to generate a package.json file."
    },
    {
      "id": 6,
      "question": "What is Express.js?",
      "answer": "Express.js is a minimal and flexible web application framework for Node.js."
    },
    {
      "id": 7,
      "question": "How do you install Express.js?",
      "answer": "You can install it using `npm install express`."
    },
    {
      "id": 8,
      "question": "How do you create a basic server in Express?",
      "answer": "By using `const express = require('express'); const app = express(); app.listen(3000);`."
    },
    {
      "id": 9,
      "question": "What is middleware in Express?",
      "answer": "Middleware functions are functions that have access to the request, response, and next objects."
    },
    {
      "id": 10,
      "question": "How do you create a GET route in Express?",
      "answer": "By using `app.get('/route', (req, res) => res.send('Hello World'));`."
    },
    {
      "id": 11,
      "question": "What is the difference between `app.use()` and `app.get()`?",
      "answer": "`app.use()` is used for middleware and `app.get()` is for defining a GET route."
    },
    {
      "id": 12,
      "question": "How do you send JSON data in an Express response?",
      "answer": "By using `res.json(data)` to send JSON data."
    },
    {
      "id": 13,
      "question": "What is the purpose of the `req` and `res` parameters in Express?",
      "answer": "`req` represents the HTTP request, and `res` represents the HTTP response."
    },
    {
      "id": 14,
      "question": "How do you handle POST requests in Express?",
      "answer": "By using `app.post('/route', (req, res) => { ... })`."
    },
    {
      "id": 15,
      "question": "How do you serve static files in Express?",
      "answer": "By using `app.use(express.static('public'))`."
    },
    {
      "id": 16,
      "question": "What is the `next()` function in Express middleware?",
      "answer": "`next()` passes control to the next middleware function in the stack."
    },
    {
      "id": 17,
      "question": "What is a Router in Express?",
      "answer": "A Router is a mini-express application that handles routes separately from the main app."
    },
    {
      "id": 18,
      "question": "How do you use a Router in Express?",
      "answer": "By creating `const router = express.Router()` and then defining routes on it."
    },
    {
      "id": 19,
      "question": "How do you handle errors in Express?",
      "answer": "By using an error-handling middleware `app.use((err, req, res, next) => { ... })`."
    },
    {
      "id": 20,
      "question": "What is body-parser in Express?",
      "answer": "`body-parser` is a middleware that parses incoming request bodies, typically used for POST requests."
    },
    {
      "id": 21,
      "question": "How do you parse JSON request bodies in Express?",
      "answer": "By using `app.use(express.json())`."
    },
    {
      "id": 22,
      "question": "How do you connect Express with MongoDB?",
      "answer": "You can use the `mongoose` package to connect Express with MongoDB."
    },
    {
      "id": 23,
      "question": "What is `res.redirect()` in Express?",
      "answer": "`res.redirect()` is used to redirect the client to another URL."
    },
    {
      "id": 24,
      "question": "How do you handle file uploads in Express?",
      "answer": "You can use the `multer` middleware to handle file uploads."
    },
    {
      "id": 25,
      "question": "How do you set up a view engine in Express?",
      "answer": "By using `app.set('view engine', 'pug')` or other templating engines."
    },
    {
      "id": 26,
      "question": "What is the purpose of `res.sendFile()`?",
      "answer": "It is used to send files as a response to the client."
    },
    {
      "id": 27,
      "question": "What is CORS and how do you enable it in Express?",
      "answer": "CORS (Cross-Origin Resource Sharing) allows restricted resources to be requested from another domain. You can enable it using the `cors` middleware."
    },
    {
      "id": 28,
      "question": "How do you set up environment variables in Node.js?",
      "answer": "You can use the `dotenv` package to manage environment variables."
    },
    {
      "id": 29,
      "question": "What is the difference between `res.send()` and `res.json()`?",
      "answer": "`res.send()` can send any type of response, whereas `res.json()` sends a JSON response."
    },
    {
      "id": 30,
      "question": "How do you create a RESTful API in Express?",
      "answer": "By defining routes for the various HTTP methods (GET, POST, PUT, DELETE) and handling them in the Express app."
    },
    {
      "id": 31,
      "question": "What are HTTP status codes, and how do you set them in Express?",
      "answer": "HTTP status codes represent the status of the request. You can set them using `res.status(code).send()`."
    },
    {
      "id": 32,
      "question": "What is the `process` object in Node.js?",
      "answer": "The `process` object provides information and control over the current Node.js process."
    },
    {
      "id": 33,
      "question": "What is the purpose of `process.env` in Node.js?",
      "answer": "`process.env` is used to access environment variables."
    },
    {
      "id": 34,
      "question": "How do you handle asynchronous operations in Node.js?",
      "answer": "You can handle asynchronous operations using callbacks, Promises, or async/await."
    },
    {
      "id": 35,
      "question": "What are Promises in Node.js?",
      "answer": "Promises represent the eventual completion (or failure) of an asynchronous operation and allow chaining of operations."
    },
    {
      "id": 36,
      "question": "What is the purpose of `async/await` in Node.js?",
      "answer": "`async/await` is used to write asynchronous code in a more synchronous manner."
    },
    {
      "id": 37,
      "question": "What is the event loop in Node.js?",
      "answer": "The event loop is a mechanism that handles asynchronous operations in Node.js by executing callback functions."
    },
    {
      "id": 38,
      "question": "What is the difference between `setTimeout()` and `setImmediate()` in Node.js?",
      "answer": "`setTimeout()` schedules a callback after a delay, while `setImmediate()` executes the callback after the current event loop completes."
    },
    {
      "id": 39,
      "question": "What is a Buffer in Node.js?",
      "answer": "A Buffer is a temporary storage used to handle binary data directly, particularly useful for reading or writing streams."
    },
    {
      "id": 40,
      "question": "What is the `fs` module in Node.js?",
      "answer": "The `fs` module provides an API for interacting with the file system, including reading, writing, and deleting files."
    },
    {
      "id": 41,
      "question": "What are streams in Node.js?",
      "answer": "Streams are objects that allow reading or writing data in a continuous manner, useful for handling large files or data chunks."
    },
    {
      "id": 42,
      "question": "What are the different types of streams in Node.js?",
      "answer": "There are four types of streams: Readable, Writable, Duplex, and Transform."
    },
    {
      "id": 43,
      "question": "How do you create a stream in Node.js?",
      "answer": "Streams are created using the `fs.createReadStream()` or `fs.createWriteStream()` methods from the `fs` module."
    },
    {
      "id": 44,
      "question": "What is the purpose of `require()` in Node.js?",
      "answer": "`require()` is used to import modules, JSON, or local files into the current module."
    },
    {
      "id": 45,
      "question": "What is a module in Node.js?",
      "answer": "A module is a reusable block of code whose existence does not accidentally impact other code."
    },
    {
      "id": 46,
      "question": "How do you create your own module in Node.js?",
      "answer": "You create a module by exporting functions, objects, or variables using `module.exports`."
    },
    {
      "id": 47,
      "question": "What is the purpose of `module.exports`?",
      "answer": "`module.exports` is used to export functions, objects, or values from a module so they can be used in other files."
    },
    {
      "id": 48,
      "question": "What is the difference between global and local modules in Node.js?",
      "answer": "Global modules are installed globally and can be used anywhere, while local modules are installed in a specific project and can only be used there."
    },
    {
      "id": 49,
      "question": "What is the difference between synchronous and asynchronous code?",
      "answer": "Synchronous code executes sequentially and blocks further operations, while asynchronous code allows other operations to run while waiting for the previous task to finish."
    },
    {
      "id": 50,
      "question": "How do you handle errors in Node.js?",
      "answer": "You can handle errors using try-catch blocks for synchronous code and `.catch()` for Promises, or using error-first callbacks."
    }
  ]
  