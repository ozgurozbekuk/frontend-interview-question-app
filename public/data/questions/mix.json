[
    {"id": 1, "question": "What does HTML stand for?", "difficulty": "easy", "answer": "HTML stands for HyperText Markup Language."},
    {"id": 2, "question": "What is the purpose of the <meta> tag?", "difficulty": "easy", "answer": "The <meta> tag provides metadata about the HTML document, such as character encoding, author, and viewport settings."},
    {"id": 3, "question": "What is the difference between <div> and <span>?", "difficulty": "easy", "answer": "<div> is a block-level element, whereas <span> is an inline element."},
    {"id": 4, "question": "How do you create a hyperlink in HTML?", "difficulty": "easy", "answer": "A hyperlink is created using the <a> tag, with the 'href' attribute specifying the URL."},
    {"id": 5, "question": "What is the use of the alt attribute in <img> tag?", "difficulty": "easy", "answer": "The alt attribute provides alternative text for the image if it cannot be displayed."},
    {"id": 6, "question": "What is the role of the <head> tag in HTML?", "difficulty": "medium", "answer": "The <head> tag contains meta-information about the HTML document, such as the title, links to stylesheets, and scripts."},
    {"id": 7, "question": "How do you include an external CSS file in an HTML document?", "difficulty": "medium", "answer": "Use the <link> tag with the 'rel' attribute set to 'stylesheet' and the 'href' attribute pointing to the CSS file."},
    {"id": 8, "question": "What is the purpose of the 'box-sizing' property in CSS?", "difficulty": "easy", "answer": "'box-sizing' determines how the total width and height of an element are calculated, including padding and borders."},
    {"id": 9, "question": "What is the difference between 'padding' and 'margin'?", "difficulty": "easy", "answer": "Padding is the space inside the border of an element, while margin is the space outside the border."},
    {"id": 10, "question": "How do you center an element horizontally in CSS?", "difficulty": "easy", "answer": "To center an element horizontally, you can use 'margin: auto' in combination with a defined width."},
    {"id": 11, "question": "What is the purpose of the 'flex' property in CSS?", "difficulty": "medium", "answer": "'flex' is a shorthand property for flex-grow, flex-shrink, and flex-basis, which controls the size and distribution of flex items in a flex container."},
    {"id": 12, "question": "What does the 'z-index' property do?", "difficulty": "medium", "answer": "'z-index' controls the stacking order of positioned elements, with higher values appearing in front of lower values."},
    {"id": 13, "question": "How do you create a responsive layout in CSS?", "difficulty": "medium", "answer": "Responsive layouts can be created using media queries, flexible grids, and fluid images."},
    {"id": 14, "question": "What is the difference between 'absolute' and 'relative' positioning?", "difficulty": "medium", "answer": "'absolute' positioning removes an element from the normal document flow, while 'relative' positioning shifts the element relative to its normal position."},
    {"id": 15, "question": "How do you apply styles to an element based on its state?", "difficulty": "medium", "answer": "You can use pseudo-classes like :hover, :focus, and :active to apply styles based on the element's state."},
    {"id": 16, "question": "What is a CSS preprocessor, and can you name a few examples?", "difficulty": "medium", "answer": "A CSS preprocessor extends CSS with variables, nesting, and mixins. Examples include Sass, LESS, and Stylus."},
    {"id": 17, "question": "How can you hide an element visually but still make it accessible to screen readers?", "difficulty": "hard", "answer": "Use the 'position: absolute; left: -9999px;' technique or 'clip-path: inset(0 0 0 0); position: absolute;' to visually hide elements while keeping them accessible."},
    {"id": 18, "question": "What is the 'grid' property in CSS, and how is it used?", "difficulty": "hard", "answer": "'grid' is a shorthand property that sets the grid-template-rows, grid-template-columns, and grid-template-areas properties, defining the grid structure of a container."},
    {"id": 19, "question": "What is the difference between 'inline' and 'block' elements?", "difficulty": "hard", "answer": "Inline elements do not break the flow of content and only take up as much width as needed, while block elements take up the full width available and start on a new line."},
    {"id": 20, "question": "How do you create a CSS animation?", "difficulty": "hard", "answer": "Create a CSS animation using the @keyframes rule to define the animation's keyframes and the 'animation' property to apply it to an element."},
    {"id": 21, "question": "What is the difference between 'var', 'let', and 'const'?", "difficulty": "easy", "answer": "'var' has function scope, 'let' and 'const' have block scope. 'const' is used for variables that should not be reassigned."},
    {"id": 22, "question": "What are closures in JavaScript?", "difficulty": "easy", "answer": "Closures are functions that have access to variables from their outer function even after the outer function has finished executing."},
    {"id": 23, "question": "How do you handle asynchronous operations in JavaScript?", "difficulty": "easy", "answer": "Use callbacks, promises, or async/await to handle asynchronous operations in JavaScript."},
    {"id": 24, "question": "What is the purpose of the 'this' keyword in JavaScript?", "difficulty": "easy", "answer": "'this' refers to the object that is executing the current code, which can vary depending on the context in which it is used."},
    {"id": 25, "question": "What are JavaScript data types?", "difficulty": "easy", "answer": "JavaScript data types include undefined, null, boolean, number, string, object, and symbol."},
    {"id": 26, "question": "What is a promise in JavaScript?", "difficulty": "medium", "answer": "A promise is an object that represents the eventual completion or failure of an asynchronous operation and its resulting value."},
    {"id": 27, "question": "How do you create an object in JavaScript?", "difficulty": "medium", "answer": "You can create an object using object literals, the 'new Object()' syntax, or constructor functions."},
    {"id": 28, "question": "What is event delegation in JavaScript?", "difficulty": "medium", "answer": "Event delegation involves attaching a single event listener to a parent element to handle events for multiple child elements."},
    {"id": 29, "question": "What is the 'prototype' in JavaScript?", "difficulty": "medium", "answer": "The 'prototype' is an object associated with every function and object, allowing properties and methods to be inherited by instances."},
    {"id": 30, "question": "What are higher-order functions in JavaScript?", "difficulty": "medium", "answer": "Higher-order functions are functions that accept other functions as arguments or return functions as results."},
    {"id": 31, "question": "What is the difference between '==' and '===' in JavaScript?", "difficulty": "medium", "answer": "'==' performs type coercion before comparison, while '===' requires both value and type to be the same."},
    {"id": 32, "question": "How do you handle errors in JavaScript?", "difficulty": "medium", "answer": "Handle errors using try/catch blocks for synchronous code and .catch() method for promises or async/await error handling."},
    {"id": 33, "question": "What is the 'map' method in JavaScript?", "difficulty": "medium", "answer": "'map' is an array method that creates a new array populated with the results of calling a provided function on every element in the calling array."},
    {"id": 34, "question": "What is the purpose of 'bind', 'call', and 'apply' methods?", "difficulty": "medium", "answer": "'bind' creates a new function with a specified 'this' value, 'call' and 'apply' immediately invoke a function with a specified 'this' value and arguments."},
    {"id": 35, "question": "How does the 'fetch' API work in JavaScript?", "difficulty": "medium", "answer": "'fetch' is a modern API for making HTTP requests, returning a promise that resolves with the response of the request."},
    {"id": 36, "question": "What are template literals in JavaScript?", "difficulty": "medium", "answer": "Template literals are strings enclosed in backticks (``) that allow embedded expressions and multi-line strings."},
    {"id": 37, "question": "What is the event loop in JavaScript?", "difficulty": "medium", "answer": "The event loop is a mechanism that handles asynchronous operations, allowing non-blocking execution of code by managing the call stack and the task queue."},
    {"id": 38, "question": "What is a JavaScript module?", "difficulty": "medium", "answer": "A JavaScript module is a file containing code that can export and import values between different files, promoting modularity and reusability."},
    {"id": 39, "question": "How do you debounce a function in JavaScript?", "difficulty": "hard", "answer": "Debounce a function by limiting its execution rate using a timeout, ensuring that the function is only executed after a certain delay without further calls."},
    {"id": 40, "question": "What is the difference between 'null' and 'undefined'?", "difficulty": "hard", "answer": "'null' is an intentional absence of value, while 'undefined' indicates that a variable has been declared but not yet assigned a value."},
    {"id": 41, "question": "How do you implement inheritance in JavaScript?", "difficulty": "hard", "answer": "Inheritance can be implemented using prototype chaining or the class syntax introduced in ES6."},
    {"id": 42, "question": "What are async functions and how do they differ from promises?", "difficulty": "hard", "answer": "Async functions are a syntactic sugar over promises, making asynchronous code easier to write and read using 'async' and 'await' keywords."},
    {"id": 43, "question": "What are JavaScript generators?", "difficulty": "hard", "answer": "Generators are functions that can be paused and resumed, allowing the use of the 'yield' keyword to produce multiple values over time."},
    {"id": 44, "question": "How do you use the 'this' keyword inside an arrow function?", "difficulty": "hard", "answer": "Arrow functions do not have their own 'this' context; they inherit 'this' from their surrounding lexical scope."},
    {"id": 45, "question": "What is the difference between synchronous and asynchronous code?", "difficulty": "hard", "answer": "Synchronous code executes line by line, blocking further execution until the current line completes, while asynchronous code allows other operations to proceed while waiting for an operation to complete."},
    {"id": 46, "question": "What is React?", "difficulty": "easy", "answer": "React is a JavaScript library for building user interfaces, developed by Facebook, which allows the creation of reusable UI components."},
    {"id": 47, "question": "What is JSX?", "difficulty": "easy", "answer": "JSX is a syntax extension for JavaScript that looks similar to HTML and is used to describe what the UI should look like in React components."},
    {"id": 48, "question": "What is a component in React?", "difficulty": "easy", "answer": "A component is a reusable piece of UI that can be either a function or a class, and it returns React elements to be rendered."},
    {"id": 49, "question": "What is the difference between a functional and a class component?", "difficulty": "medium", "answer": "Functional components are simpler and use hooks for state and lifecycle methods, while class components use class syntax and have built-in lifecycle methods."},
    {"id": 50, "question": "What are hooks in React?", "difficulty": "medium", "answer": "Hooks are functions that let you use state and other React features in functional components without writing a class."},
    {"id": 51, "question": "How do you manage state in React?", "difficulty": "medium", "answer": "State can be managed using the useState hook in functional components or the state property in class components. For global state, use context API or libraries like Redux."},
    {"id": 52, "question": "What is the purpose of useEffect hook?", "difficulty": "medium", "answer": "The useEffect hook allows you to perform side effects in functional components, such as data fetching, subscriptions, or manually changing the DOM."},
    {"id": 53, "question": "How does React handle forms?", "difficulty": "medium", "answer": "React handles forms using controlled components where form data is controlled by the component’s state, and form submissions are managed through event handlers."},
    {"id": 54, "question": "What is the virtual DOM?", "difficulty": "medium", "answer": "The virtual DOM is a lightweight representation of the actual DOM that React uses to optimize updates by diffing and minimizing the number of changes to the real DOM."},
    {"id": 55, "question": "What are prop types in React?", "difficulty": "medium", "answer": "Prop types are a way to validate the types of props passed to a component, ensuring that they are of the correct type and providing default values when necessary."},
    {"id": 56, "question": "What is React Router?", "difficulty": "medium", "answer": "React Router is a library for routing in React applications, allowing you to create single-page applications with navigation and URL management."},
    {"id": 57, "question": "How do you optimize performance in a React application?", "difficulty": "medium", "answer": "Performance can be optimized using techniques such as memoization, lazy loading components, code splitting, and avoiding unnecessary re-renders."},
    {"id": 58, "question": "What are error boundaries in React?", "difficulty": "medium", "answer": "Error boundaries are components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI."},
    {"id": 59, "question": "How do you use context API in React?", "difficulty": "medium", "answer": "Context API provides a way to share values between components without having to pass props manually through every level of the component tree."},
    {"id": 60, "question": "What is the difference between controlled and uncontrolled components?", "difficulty": "medium", "answer": "Controlled components manage their state through React and receive their values from props, while uncontrolled components store their own state internally and access it through refs."},
    {"id": 61, "question": "What is React's reconciliation process?", "difficulty": "medium", "answer": "Reconciliation is the process React uses to update the DOM by comparing the virtual DOM with the actual DOM and making the necessary updates."},
    {"id": 62, "question": "How do you create a higher-order component (HOC)?", "difficulty": "hard", "answer": "A higher-order component is a function that takes a component and returns a new component with additional props or functionality."},
    {"id": 63, "question": "What are React fragments?", "difficulty": "hard", "answer": "Fragments are a way to group multiple elements without adding extra nodes to the DOM. They are represented by the <React.Fragment> or the shorthand <></>."},
    {"id": 64, "question": "What is the purpose of the 'useReducer' hook?", "difficulty": "hard", "answer": "'useReducer' is used for managing more complex state logic in functional components, providing an alternative to 'useState' with a reducer function."},
    {"id": 65, "question": "How do you implement server-side rendering in React?", "difficulty": "hard", "answer": "Server-side rendering can be implemented using frameworks like Next.js or by setting up a custom server to render React components on the server before sending HTML to the client."},
    {"id": 66, "question": "What is the 'useCallback' hook used for?", "difficulty": "hard", "answer": "'useCallback' is used to memoize callback functions, preventing them from being recreated on every render and optimizing performance."},
    {"id": 67, "question": "How do you handle forms with validation in React?", "difficulty": "hard", "answer": "Forms with validation can be handled using controlled components with custom validation logic or libraries like Formik and React Hook Form."},
    {"id": 68, "question": "What is a render prop in React?", "difficulty": "hard", "answer": "A render prop is a function prop that a component uses to know what to render, allowing for dynamic rendering of UI based on component state or props."},
    {"id": 69, "question": "What is React's Suspense feature?", "difficulty": "hard", "answer": "Suspense is a feature for handling asynchronous operations in React, allowing you to specify a loading fallback while waiting for a component or data to load."},
    {"id": 70, "question": "How do you manage side effects in React functional components?", "difficulty": "hard", "answer": "Side effects are managed using the useEffect hook, which allows you to perform actions like data fetching, subscriptions, and manual DOM manipulations."},
    {"id": 71, "question": "What is the use of 'React.StrictMode'?", "difficulty": "hard", "answer": "'React.StrictMode' is a wrapper component that activates additional checks and warnings for its descendants, helping identify potential problems in the application."},
    {"id": 72, "question": "How do you perform code splitting in React?", "difficulty": "hard", "answer": "Code splitting can be achieved using dynamic import() and React.lazy to load components only when they are needed, reducing the initial load time."},
    {"id": 73, "question": "What are React portals?", "difficulty": "hard", "answer": "React portals provide a way to render children into a DOM node that exists outside the parent component's DOM hierarchy."},
    {"id": 74, "question": "How do you handle routing in React applications?", "difficulty": "hard", "answer": "Routing in React applications is typically handled using libraries like React Router, which provides components and hooks for managing navigation and URL changes."},
    {"id": 75, "question": "What is the 'useMemo' hook used for?", "difficulty": "hard", "answer": "'useMemo' is used to memoize expensive calculations, preventing them from being recalculated on every render and optimizing performance."},
    {"id": 76, "question": "What is the role of 'useLayoutEffect' compared to 'useEffect'?", "difficulty": "hard", "answer": "'useLayoutEffect' runs synchronously after all DOM mutations, ensuring that layout calculations are done before the browser repaints, while 'useEffect' runs asynchronously after the paint."},
    {"id": 77, "question": "How do you test React components?", "difficulty": "hard", "answer": "React components can be tested using libraries like Jest and React Testing Library, which provide tools for rendering components, simulating user interactions, and asserting on component behavior."},
    {"id": 78, "question": "What are controlled and uncontrolled components in React?", "difficulty": "hard", "answer": "Controlled components have their form data controlled by React state, while uncontrolled components manage their form data internally using refs."},
    {"id": 79, "question": "What is React's context API, and when would you use it?", "difficulty": "hard", "answer": "The context API is used for passing data through the component tree without having to pass props down manually at every level, useful for global state management."},
    {"id": 80, "question": "How do you handle asynchronous operations in React?", "difficulty": "hard", "answer": "Asynchronous operations can be handled using async/await in combination with the useEffect hook or by using libraries like React Query or SWR for data fetching."}
]
